/* ==========================================================================
   Guss: columns
   ========================================================================== */

/**
 * A "columns pattern" will fit as many "$guss-column-min-width"-wide columns
 * in any type of context: full-width container, sidebarâ€¦
 *
 * Usage 1: Sass mixin
 * @include guss-columns('.classname');
 * Examples: http://sassmeister.com/gist/7987988
 *
 * Usage 2: utility class set as `$guss-columns-utility-class`
 * @include guss-columns-utility;
 *
 * <div class="l-columns">
 *     <div class="l-columns__item"></div>
 *     <div class="l-columns__item"></div>
 *     <div class="l-columns__item"></div>
 *     <div class="l-columns__item"></div>
 *     <div class="l-columns__item"></div>
 *     <div class="l-columns__item"></div>
 *     <div class="l-columns__item"></div>
 * </div>
 *
 */

$guss-column-min-width: 300px !default;
$guss-column-rule: 1px solid #e3e3db !default;
$guss-column-gap: 20px !default;

$guss-columns-utility-class: '.l-columns';

// When set to false, output a simpler version with a static width
// http://caniuse.com/#feat=multicolumn
$browser-supports-columns: true !default;

// Static, non-responsive width for older browsers
$guss-columns-fallback-width: 940px !default;

// Number of columns in the non-responsive version
$guss-columns-fallback-columns: 3 !default;

@mixin guss-columns($base-class,
                    $column-min-width: $guss-column-min-width,
                    $column-rule: $guss-column-rule,
                    $column-gap: $guss-column-gap,
                    $columns-fallback-width: $guss-columns-fallback-width,
                    $columns-fallback-columns: $guss-columns-fallback-columns,
                    $css3-columns-support: $browser-supports-columns) {
    @if $css3-columns-support {
        #{$base-class} {
            -webkit-column-width: rem($column-min-width);
            -webkit-column-rule: $column-rule;
            -webkit-column-gap: rem($column-gap);

            -moz-column-width: rem($column-min-width);
            -moz-column-rule: $column-rule;
            -moz-column-gap: rem($column-gap);

            column-width: rem($column-min-width);
            column-rule: $column-rule;
            column-gap: rem($column-gap);
        }
        #{$base-class}__item {
            -webkit-column-break-inside: avoid;
               -moz-column-break-inside: avoid;
                    column-break-inside: avoid;
            // column-break-inside: avoid; does not work in all browsers
            // so we use inline-block instead
            display: inline-block;
            width: 100%;
        }
    } @else {
        #{$base-class} {
            @include rem((
                width: $columns-fallback-width + $column-gap,
                margin-left: $column-gap / 2 * -1,
                margin-right: $column-gap / 2 * -1
            ));

            // Micro clearfix (http://nicolasgallagher.com/micro-clearfix-hack/)
            zoom: 1;

            &:after,
            &:before {
                content: "";
                display: table;
            }
            &:after {
                clear: both;
            }
        }
        #{$base-class}__item {
            box-sizing: border-box;
            position: relative;
            float: left;
            @include rem((
                width: $columns-fallback-width / $columns-fallback-columns - $column-gap,
                margin-left: $column-gap / 2,
                margin-right: $column-gap / 2
            ));
            @if $column-rule != none {
                &:nth-child(n+1):before {
                    content: '';
                    position: absolute;
                    top: 0;
                    @include rem((
                        left: $column-gap / 2 * -1
                    ));
                    bottom: 0;
                    height: 100%;
                    width: 1px;
                    background: nth($column-rule, 3);
                }
                &:nth-child(#{$columns-fallback-columns}n+1):before {
                    display: none;
                }
            }
        }
    }
}

@mixin guss-columns-utility {
    @include guss-columns($guss-columns-utility-class);
}
